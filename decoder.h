#ifndef DECODER_H
#define DECODER_H
#include <iostream>

class decoder                                                      //Основной класс, в будущем я планирую добавить дружественный класс или же наследование.
{
    FILE *in;                                                      //Адрес файла, в который идут расшифрованные данные
    FILE *out;                                                     //Адрес файла, из которого берутся зашифрованные данные
    FILE *A, *B, *C, *D, *centers, *subcenters;                    //Таблицы необходимые для расшифровки данных
    long int messageLenght=0;                                      //Длина сообщения. Используется, чтобы отсечь сообщения длиной больше 15000
    int version=0;                                                 //Версия сообщения. Необходима, тк расшифровки 2 или 3 и 4 версии отличаются
    bool IfSection2;                                               //Переменная типа bool содержит в себе информацию о втором разделе, тк он присутствует не везде
public:
    decoder(char *inputname, char *outputname);                    //Конструктор (открывает таблицы и файлы для чтения и записи)
    ~decoder();                                                    //Деструктор (Закрывает все файлы и таблицы, выводит сообщение о том, что расшифрровка завершена)
    void Zap();                                                    //Перенос числа из зашифрованного файла в файл, который будет расшифрован
    void Zap(char c);                                              //Перегруженная функция Zap, которая передает в файл принимаемый символ
    void PushNumber(long int num);                                 //Добавление цифр(числа) в выходящий файл.
    long int GetDouble();                                          //Функция получения числа из 2 байт зашифрованного файла
    long int GetTriple();                                          //Функция получения числа из 3 байт зашифрованного файла (2 функции, необходимые для программы)
    void ZeroPoint();                                              //Полная расшифровка раздела 0
    void FirstPoint();                                             //Полная расшифровка раздела 1
    void SecondPoint();                                            //Полная расшифровка раздела 2, если он существует
    void ThirdPoint();                                             //Расшифровка раздела 3 до описателей (включительно)
    void FinalPoint();                                             //Финальная сборка всех разделов вместе
    void RewindAll();                                              //Возвращает калитку в начало у всех файлов
    bool NewMessageFounder();                                      //Ищет -New Message-, проверяет достигнут ли конец файла
};

#endif // DECODER_H
